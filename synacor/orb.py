#!/usr/bin/env python3

#################################
#       #  [4]  #       #  [7]  #
#   *   #   8   #   -   #   1   #
#       #       #       #       #
#################################
#  [1]  #       #  [5]  #       #
#   4   #   *   #  11   #   *   #
#       #       #       #       #
#################################
#       #  [2]  #       #  [6]  #
#   +   #   4   #   -   #  18   #
#       #       #       #       #
#################################
#  [0]  #       #  [3]  #       #
#  22   #   -   #   9   #   *   #
#       #       #       #       #
#################################

def calc(x, o, y):
    if o == '+':
        return x + y
    if o == '-':
        return x - y
    if o == '*':
        return x * y

moves = {
    0: [('+', 4, 1), ('+', 4, 2), ('-', 4, 2), ('-', 9, 3)],
    1: [('*', 8, 4), ('*', 4, 2), ('+', 4, 2), ('*', 11, 5)],
    2: [('+', 4, 1), ('*', 4, 1), ('*', 8, 4), ('*', 11, 5), ('-', 11, 5), ('-', 9, 3), ('-', 18, 6)],
    3: [('-', 4, 2), ('-', 11, 5), ('-', 18, 6), ('*', 18, 6)],
    4: [('*', 4, 1), ('*', 4, 2), ('*', 11, 5), ('-', 11, 5), ('-', 1, 7)],
    5: [('-', 8, 4), ('-', 1, 7), ('*', 8, 4), ('*', 4, 1), ('*', 4, 2), ('-', 4, 2), ('-', 9, 3), ('-', 18, 6), ('*', 1, 7), ('*', 18, 6)],
    6: [('*', 1, 7), ('*', 11, 5), ('-', 11, 5), ('-', 4, 2), ('-', 9, 3), ('*', 9, 3)],
}

def bfs(target):
    queue = [(0, 22, [])]
    while queue:
        state, value, steps = queue.pop(0)
        if state == 7:
            if value == target:
                return steps
        else:
            for op, x, new in moves[state]:
                y = calc(value, op, x)
                if value > 0:
                    queue.append((new, y, steps + [(op, x)]))

print(bfs(30))
